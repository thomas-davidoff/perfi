import os

# Set PERFI_ENV=test early on to correctly load test config, if one
# is provided. See: config/settings.py for implementation details
os.environ["PERFI_ENV"] = "test"

import pytest
from db.session_manager import db_manager
from tests.utils import tmp_postgres_db
from config.migrations import alembic_config_from_url, run_upgrade, check_migrations
from alembic.util.exc import AutogenerateDiffsDetected
import warnings


@pytest.fixture(scope="session", autouse=True)
def anyio_backend():
    return "asyncio", {"use_uvloop": True}


@pytest.fixture(scope="session")
async def sessionmanager_for_tests():
    async with tmp_postgres_db(suffix="pytest") as tmp_url:
        alembic_config = alembic_config_from_url(tmp_url)
        db_manager.init(db_url=tmp_url)
        async with db_manager.connect() as conn:
            await conn.run_sync(run_upgrade, alembic_config)
            try:
                await conn.run_sync(check_migrations, alembic_config)
            except AutogenerateDiffsDetected as e:
                warnings.warn(e)
        yield db_manager
        await db_manager.close()


@pytest.fixture()
async def session(sessionmanager_for_tests):
    async with sessionmanager_for_tests.session() as session:
        yield session
