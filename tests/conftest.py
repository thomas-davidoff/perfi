import os

# Set PERFI_ENV=test early on to correctly load test config, if one
# is provided. See: config/settings.py for implementation details
os.environ["PERFI_ENV"] = "test"

from config.initializers.logger import init_logging

init_logging()
import logging

logger = logging.getLogger(__name__)

import pytest
from db.session_manager import db_manager, DatabaseSessionManager
from tests.utils import tmp_postgres_db
from migrations.commands import run_upgrade, check_migrations, alembic_config
from alembic.util.exc import AutogenerateDiffsDetected
import warnings

from sqlalchemy.ext.asyncio import async_sessionmaker


pytest_plugins = [
    "tests.fixtures.models",
]


@pytest.fixture(scope="session", autouse=True)
def test_alembic_cfg():
    logger.debug("Configuring test config for Alembic")
    cfg = alembic_config
    return cfg


@pytest.fixture(scope="session", autouse=True)
def anyio_backend():
    return "asyncio", {"use_uvloop": True}


@pytest.fixture(scope="session")
async def sessionmanager_for_tests(test_alembic_cfg):
    async with tmp_postgres_db(suffix="pytest") as tmp_url:
        db_manager.init(db_url=tmp_url)
        async with db_manager.connect() as conn:
            await conn.run_sync(run_upgrade, test_alembic_cfg)
            try:
                await conn.run_sync(check_migrations, test_alembic_cfg, silent=True)
            except AutogenerateDiffsDetected as e:
                warnings.warn(e)
        yield db_manager
        await db_manager.close()


@pytest.fixture(scope="function")
async def session(sessionmanager_for_tests: DatabaseSessionManager):
    async with sessionmanager_for_tests.connect() as connection:

        session_factory = async_sessionmaker(
            bind=connection,
            expire_on_commit=False,
        )
        session = session_factory()

        yield session

        await session.flush()
        await session.close()

        await connection.rollback()
